{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-cms\\\\src\\\\app\\\\features\\\\PostsList.tsx\",\n    _s = $RefreshSig$();\n\nimport { mdiOpenInNew } from \"@mdi/js\";\nimport Icon from \"@mdi/react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport { useCallback, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useMemo } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport { usePagination, useTable } from \"react-table\";\nimport AuthService from \"../../auth/Authorization.service\";\nimport usePosts from \"../../core/hooks/usePosts\";\nimport modal from \"../../core/utils/modal\";\nimport Loading from \"../components/Loading\";\nimport PostTitleAnchor from \"../components/PostTitleAnchor\";\nimport Table from \"../components/Table/Table\";\nimport PostPreview from \"./PostPreview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BLOG_SERVER = process.env.REACT_APP_BLOG_SERVER_BASE_URL;\nexport default function PostList() {\n  _s();\n\n  const {\n    loading,\n    paginatedPosts,\n    fetchPosts\n  } = usePosts();\n  const [page, setPage] = useState(0);\n  useEffect(() => {\n    fetchPosts({\n      page,\n      size: 7,\n      showAll: true,\n      sort: [\"createdAt\", \"desc\"]\n    });\n  }, [fetchPosts, page]);\n  const openInNew = useCallback(async post => {\n    let url = `${BLOG_SERVER}/posts/${post.id}/${post.slug}`;\n\n    if (!post.published) {\n      const codeVerifier = AuthService.getCodeVerifier();\n      const refreshToken = AuthService.getRefreshToken();\n\n      if (codeVerifier && refreshToken) {\n        const {\n          access_token\n        } = await AuthService.getNewToken({\n          codeVerifier,\n          refreshToken,\n          scope: \"post:read\"\n        });\n        url += `?token=${access_token}`;\n      }\n    }\n\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.target = \"_blank\";\n    a.rel = \"noopener noreferrer\";\n    a.click();\n  }, []);\n  const columns = useMemo(() => [{\n    Header: \"\",\n    accessor: \"id\",\n    Cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingLeft: 8,\n        width: \"16px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: () => openInNew(row.original),\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          path: mdiOpenInNew,\n          size: \"16px\",\n          color: \"#09f\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)\n  }, {\n    Header: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"left\"\n      },\n      children: \"T\\xEDtulo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 23\n    }, this),\n    accessor: \"title\",\n    Cell: props => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"left\",\n        display: \"flex\",\n        gap: 8,\n        alignItems: \"center\",\n        maxWidth: 400\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        width: 24,\n        height: 24,\n        src: props.row.original.editor.avatarUrls.small,\n        alt: props.row.original.editor.name,\n        title: props.row.original.editor.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PostTitleAnchor, {\n        title: props.value,\n        href: `/posts/${props.row.original.id}`,\n        onClick: e => {\n          e.preventDefault();\n          modal({\n            children: /*#__PURE__*/_jsxDEV(PostPreview, {\n              postId: props.row.original.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)\n          });\n        },\n        children: props.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this)\n  }, {\n    Header: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\"\n      },\n      children: \"Cria\\xE7\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 23\n    }, this),\n    accessor: \"createdAt\",\n    Cell: props => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\",\n        fontFamily: '\"Roboto mono\", monospace'\n      },\n      children: format(parseISO(props.value), \"dd/MM/yyyy\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }, this)\n  }, {\n    id: Math.random().toString(),\n    accessor: \"published\",\n    Header: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\"\n      },\n      children: \"Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 23\n    }, this),\n    Cell: props => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\"\n      },\n      children: props.value ? \"Publicado\" : \"Privado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }, this)\n  }], [openInNew]);\n  const instance = useTable({\n    data: (paginatedPosts === null || paginatedPosts === void 0 ? void 0 : paginatedPosts.content) || [],\n    columns,\n    manualPagination: true,\n    initialState: {\n      pageIndex: 0\n    },\n    pageCount: paginatedPosts === null || paginatedPosts === void 0 ? void 0 : paginatedPosts.totalPages\n  }, usePagination);\n  if (!paginatedPosts) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 32\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Loading, {\n      show: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      instance: instance,\n      onPaginate: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PostList, \"jjs0oDZlayR0NjWV2BKPriclOTA=\", false, function () {\n  return [usePosts, useTable];\n});\n\n_c = PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-cms/src/app/features/PostsList.tsx"],"names":["mdiOpenInNew","Icon","format","parseISO","useCallback","useState","useEffect","useMemo","Skeleton","usePagination","useTable","AuthService","usePosts","modal","Loading","PostTitleAnchor","Table","PostPreview","BLOG_SERVER","process","env","REACT_APP_BLOG_SERVER_BASE_URL","PostList","loading","paginatedPosts","fetchPosts","page","setPage","size","showAll","sort","openInNew","post","url","id","slug","published","codeVerifier","getCodeVerifier","refreshToken","getRefreshToken","access_token","getNewToken","scope","a","document","createElement","href","target","rel","click","columns","Header","accessor","Cell","row","paddingLeft","width","cursor","original","textAlign","props","display","gap","alignItems","maxWidth","editor","avatarUrls","small","name","value","e","preventDefault","children","fontFamily","Math","random","toString","instance","data","content","manualPagination","initialState","pageIndex","pageCount","totalPages"],"mappings":"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","sourcesContent":["import { mdiOpenInNew } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport { Post } from \"danielbonifacio-sdk\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useMemo } from \"react\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport { Column, usePagination, useTable } from \"react-table\";\r\nimport AuthService from \"../../auth/Authorization.service\";\r\nimport usePosts from \"../../core/hooks/usePosts\";\r\nimport modal from \"../../core/utils/modal\";\r\nimport Loading from \"../components/Loading\";\r\nimport PostTitleAnchor from \"../components/PostTitleAnchor\";\r\nimport Table from \"../components/Table/Table\";\r\nimport PostPreview from \"./PostPreview\";\r\n\r\nconst BLOG_SERVER = process.env.REACT_APP_BLOG_SERVER_BASE_URL;\r\n\r\nexport default function PostList() {\r\n  const { loading, paginatedPosts, fetchPosts } = usePosts();\r\n  const [page, setPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetchPosts({\r\n      page,\r\n      size: 7,\r\n      showAll: true,\r\n      sort: [\"createdAt\", \"desc\"],\r\n    });\r\n  }, [fetchPosts, page]);\r\n\r\n  const openInNew = useCallback(async (post: Post.Summary) => {\r\n    let url = `${BLOG_SERVER}/posts/${post.id}/${post.slug}`;\r\n\r\n    if (!post.published) {\r\n      const codeVerifier = AuthService.getCodeVerifier();\r\n      const refreshToken = AuthService.getRefreshToken();\r\n\r\n      if (codeVerifier && refreshToken) {\r\n        const { access_token } = await AuthService.getNewToken({\r\n          codeVerifier,\r\n          refreshToken,\r\n          scope: \"post:read\",\r\n        });\r\n\r\n        url += `?token=${access_token}`;\r\n      }\r\n    }\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.target = \"_blank\";\r\n    a.rel = \"noopener noreferrer\";\r\n    a.click();\r\n  }, []);\r\n\r\n  const columns = useMemo<Column<Post.Summary>[]>(\r\n    () => [\r\n      {\r\n        Header: \"\",\r\n        accessor: \"id\",\r\n        Cell: ({ row }) => (\r\n          <div style={{ paddingLeft: 8, width: \"16px\" }}>\r\n            <span\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => openInNew(row.original)}\r\n            >\r\n              <Icon path={mdiOpenInNew} size={\"16px\"} color={\"#09f\"} />\r\n            </span>\r\n          </div>\r\n        ),\r\n      },\r\n      {\r\n        Header: () => <div style={{ textAlign: \"left\" }}>Título</div>,\r\n        accessor: \"title\",\r\n        Cell: (props) => (\r\n          <div\r\n            style={{\r\n              textAlign: \"left\",\r\n              display: \"flex\",\r\n              gap: 8,\r\n              alignItems: \"center\",\r\n              maxWidth: 400,\r\n            }}\r\n          >\r\n            <img\r\n              width={24}\r\n              height={24}\r\n              src={props.row.original.editor.avatarUrls.small}\r\n              alt={props.row.original.editor.name}\r\n              title={props.row.original.editor.name}\r\n            />\r\n            <PostTitleAnchor\r\n              title={props.value}\r\n              href={`/posts/${props.row.original.id}`}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                modal({\r\n                  children: <PostPreview postId={props.row.original.id} />,\r\n                });\r\n              }}\r\n            >\r\n              {props.value}\r\n            </PostTitleAnchor>\r\n          </div>\r\n        ),\r\n      },\r\n      {\r\n        Header: () => <div style={{ textAlign: \"right\" }}>Criação</div>,\r\n        accessor: \"createdAt\",\r\n        Cell: (props) => (\r\n          <div\r\n            style={{\r\n              textAlign: \"right\",\r\n              fontFamily: '\"Roboto mono\", monospace',\r\n            }}\r\n          >\r\n            {format(parseISO(props.value), \"dd/MM/yyyy\")}\r\n          </div>\r\n        ),\r\n      },\r\n      {\r\n        id: Math.random().toString(),\r\n        accessor: \"published\",\r\n        Header: () => <div style={{ textAlign: \"right\" }}>Status</div>,\r\n        Cell: (props) => (\r\n          <div style={{ textAlign: \"right\" }}>\r\n            {props.value ? \"Publicado\" : \"Privado\"}\r\n          </div>\r\n        ),\r\n      },\r\n    ],\r\n    [openInNew]\r\n  );\r\n\r\n  const instance = useTable<Post.Summary>(\r\n    {\r\n      data: paginatedPosts?.content || [],\r\n      columns,\r\n      manualPagination: true,\r\n      initialState: { pageIndex: 0 },\r\n      pageCount: paginatedPosts?.totalPages,\r\n    },\r\n    usePagination\r\n  );\r\n\r\n  if (!paginatedPosts)\r\n    return (\r\n      <div>\r\n        <Skeleton height={32} />\r\n        <Skeleton height={40} />\r\n        <Skeleton height={40} />\r\n        <Skeleton height={40} />\r\n        <Skeleton height={40} />\r\n        <Skeleton height={40} />\r\n        <Skeleton height={40} />\r\n        <Skeleton height={40} />\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Loading show={loading} />\r\n      <Table instance={instance} onPaginate={setPage} />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}