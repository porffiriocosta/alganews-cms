{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-cms\\\\src\\\\app\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport jwtDecode from \"jwt-decode\";\nimport { useEffect, useMemo } from \"react\";\nimport { Route, Switch, useHistory, useLocation } from \"react-router-dom\";\nimport AuthService from \"../auth/Authorization.service\";\nimport useAuth from \"../core/hooks/useAuth\";\nimport info from \"../core/utils/info\";\nimport Loading from \"./components/Loading\";\nimport EditorProfileView from \"./views/EditorProfile.view\";\nimport EditorsListView from \"./views/EditorsList.view\";\nimport Home from \"./views/Home.view\";\nimport NotFound404 from \"./views/NotFound404.view\";\nimport PostCreateView from \"./views/PostCreate.view\";\nimport PostEditView from \"./views/PostEdit.view\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\nexport default function App() {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  const {\n    user,\n    fetchUser\n  } = useAuth();\n  useEffect(() => {\n    window.onunhandledrejection = function (error) {\n      var _error$reason$respons, _error$reason$respons2;\n\n      console.log(error);\n      info({\n        title: ((_error$reason$respons = error.reason.response) === null || _error$reason$respons === void 0 ? void 0 : _error$reason$respons.data.title) || \"Erro\",\n        description: ((_error$reason$respons2 = error.reason.response) === null || _error$reason$respons2 === void 0 ? void 0 : _error$reason$respons2.data.detail) || error.reason.message\n      });\n    };\n  }, []);\n  useEffect(() => {\n    async function identify() {\n      const isInAuthorizationRoute = window.location.pathname === \"/authorize\";\n      const code = new URLSearchParams(window.location.search).get(\"code\");\n      const codeVerifier = AuthService.getCodeVerifier();\n      const accessToken = AuthService.getAccessToken();\n\n      if (!accessToken && !isInAuthorizationRoute) {\n        AuthService.imperativelySendToLoginScreen();\n      }\n\n      if (isInAuthorizationRoute) {\n        if (!code) {\n          info({\n            title: \"Erro\",\n            description: \"Código de autorização não informado\"\n          });\n          AuthService.imperativelySendToLoginScreen();\n          return;\n        }\n\n        if (!codeVerifier) {\n          AuthService.imperativelySendToLogout();\n          return;\n        } // busca o primeiro token de acesso\n\n\n        const {\n          access_token,\n          refresh_token\n        } = await AuthService.getFirstAccessTokens({\n          code,\n          codeVerifier,\n          redirectUri: `${APP_BASE_URL}/authorize`\n        });\n        AuthService.setAccessToken(access_token);\n        AuthService.setRefreshToken(refresh_token);\n        const decodedToken = jwtDecode(access_token);\n        fetchUser(decodedToken[\"alganews:user_id\"]);\n        history.push(\"/\");\n      }\n\n      if (accessToken) {\n        const decodedToken = jwtDecode(accessToken);\n        fetchUser(decodedToken[\"alganews:user_id\"]);\n      }\n    }\n\n    identify();\n  }, [history, fetchUser]);\n  const isAuthorizationRoute = useMemo(() => location.pathname === \"/authorize\", [location.pathname]);\n  if (isAuthorizationRoute || !user) return /*#__PURE__*/_jsxDEV(Loading, {\n    show: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 45\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      component: Home\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/editores\",\n      exact: true,\n      component: EditorsListView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/editores/:id\",\n      exact: true,\n      component: EditorProfileView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/posts/criar\",\n      exact: true,\n      component: PostCreateView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/posts/editar/:id\",\n      exact: true,\n      component: PostEditView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      component: NotFound404\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"iqNaP1Aesg9TMUBynCMdu9uqbjc=\", false, function () {\n  return [useHistory, useLocation, useAuth];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-cms/src/app/index.tsx"],"names":["jwtDecode","useEffect","useMemo","Route","Switch","useHistory","useLocation","AuthService","useAuth","info","Loading","EditorProfileView","EditorsListView","Home","NotFound404","PostCreateView","PostEditView","APP_BASE_URL","process","env","REACT_APP_BASE_URL","App","history","location","user","fetchUser","window","onunhandledrejection","error","console","log","title","reason","response","data","description","detail","message","identify","isInAuthorizationRoute","pathname","code","URLSearchParams","search","get","codeVerifier","getCodeVerifier","accessToken","getAccessToken","imperativelySendToLoginScreen","imperativelySendToLogout","access_token","refresh_token","getFirstAccessTokens","redirectUri","setAccessToken","setRefreshToken","decodedToken","push","isAuthorizationRoute"],"mappings":"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","sourcesContent":["import jwtDecode from \"jwt-decode\";\nimport { useEffect, useMemo } from \"react\";\nimport { Route, Switch, useHistory, useLocation } from \"react-router-dom\";\nimport { Authentication } from \"../auth/Auth\";\nimport AuthService from \"../auth/Authorization.service\";\nimport useAuth from \"../core/hooks/useAuth\";\nimport info from \"../core/utils/info\";\nimport Loading from \"./components/Loading\";\nimport EditorProfileView from \"./views/EditorProfile.view\";\nimport EditorsListView from \"./views/EditorsList.view\";\nimport Home from \"./views/Home.view\";\nimport NotFound404 from \"./views/NotFound404.view\";\nimport PostCreateView from \"./views/PostCreate.view\";\nimport PostEditView from \"./views/PostEdit.view\";\n\nconst APP_BASE_URL = process.env.REACT_APP_BASE_URL;\n\nexport default function App() {\n  const history = useHistory();\n  const location = useLocation();\n\n  const { user, fetchUser } = useAuth();\n\n  useEffect(() => {\n    window.onunhandledrejection = function (error: PromiseRejectionEvent) {\n      console.log(error);\n      info({\n        title: error.reason.response?.data.title || \"Erro\",\n        description: error.reason.response?.data.detail || error.reason.message,\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    async function identify() {\n      const isInAuthorizationRoute = window.location.pathname === \"/authorize\";\n      const code = new URLSearchParams(window.location.search).get(\"code\");\n\n      const codeVerifier = AuthService.getCodeVerifier();\n      const accessToken = AuthService.getAccessToken();\n\n      if (!accessToken && !isInAuthorizationRoute) {\n        AuthService.imperativelySendToLoginScreen();\n      }\n\n      if (isInAuthorizationRoute) {\n        if (!code) {\n          info({\n            title: \"Erro\",\n            description: \"Código de autorização não informado\",\n          });\n          AuthService.imperativelySendToLoginScreen();\n          return;\n        }\n\n        if (!codeVerifier) {\n          AuthService.imperativelySendToLogout();\n          return;\n        }\n\n        // busca o primeiro token de acesso\n        const {\n          access_token,\n          refresh_token,\n        } = await AuthService.getFirstAccessTokens({\n          code,\n          codeVerifier,\n          redirectUri: `${APP_BASE_URL}/authorize`,\n        });\n\n        AuthService.setAccessToken(access_token);\n        AuthService.setRefreshToken(refresh_token);\n\n        const decodedToken: Authentication.AccessTokenDecodedBody = jwtDecode(\n          access_token\n        );\n        fetchUser(decodedToken[\"alganews:user_id\"]);\n        history.push(\"/\");\n      }\n\n      if (accessToken) {\n        const decodedToken: Authentication.AccessTokenDecodedBody = jwtDecode(\n          accessToken\n        );\n        fetchUser(decodedToken[\"alganews:user_id\"]);\n      }\n    }\n\n    identify();\n  }, [history, fetchUser]);\n\n  const isAuthorizationRoute = useMemo(\n    () => location.pathname === \"/authorize\",\n    [location.pathname]\n  );\n\n  if (isAuthorizationRoute || !user) return <Loading show />;\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/editores\" exact component={EditorsListView} />\n      <Route path=\"/editores/:id\" exact component={EditorProfileView} />\n      <Route path=\"/posts/criar\" exact component={PostCreateView} />\n      <Route path=\"/posts/editar/:id\" exact component={PostEditView} />\n      <Route component={NotFound404} />\n    </Switch>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}