{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-cms\\\\src\\\\app\\\\components\\\\MarkdownEditor\\\\MarkdownEditor.tsx\";\nimport MarkdownIt from \"markdown-it\";\nimport MdEditor, { Plugins } from \"react-markdown-editor-lite\";\nimport \"react-markdown-editor-lite/lib/index.css\";\nimport { FileService } from \"danielbonifacio-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMdEditor.unuse(Plugins.FontUnderline);\nconst parser = new MarkdownIt();\n\nconst defaultRender = parser.renderer.rules.link_open || function (tokens, idx, options, env, self) {\n  return self.renderToken(tokens, idx, options);\n};\n\nparser.renderer.rules.link_open = function (tokens, idx, options, env, self) {\n  var aIndex = tokens[idx].attrIndex(\"target\");\n\n  if (aIndex < 0) {\n    tokens[idx].attrPush([\"target\", \"_blank\"]);\n  } else {\n    //@ts-ignore\n    tokens[idx].attrs[aIndex][1] = \"_blank\";\n  }\n\n  return defaultRender(tokens, idx, options, env, self);\n};\n\nexport default function MarkdownEditor(props) {\n  async function handleImageUpload(file) {\n    return FileService.upload(file);\n  }\n\n  return /*#__PURE__*/_jsxDEV(MdEditor, {\n    readOnly: props.readOnly,\n    onImageUpload: handleImageUpload,\n    style: {\n      height: props.readOnly ? \"auto\" : 300\n    },\n    value: props.value,\n    renderHTML: text => parser.render(text),\n    config: {\n      view: {\n        html: false\n      }\n    },\n    onChange: ({\n      text\n    }) => props.onChange && props.onChange(text),\n    view: props.readOnly ? {\n      menu: false,\n      md: false,\n      html: true\n    } : undefined\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = MarkdownEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarkdownEditor\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-cms/src/app/components/MarkdownEditor/MarkdownEditor.tsx"],"names":["MarkdownIt","MdEditor","Plugins","FileService","unuse","FontUnderline","parser","defaultRender","renderer","rules","link_open","tokens","idx","options","env","self","renderToken","aIndex","attrIndex","attrPush","attrs","MarkdownEditor","props","handleImageUpload","file","upload","readOnly","height","value","text","render","view","html","onChange","menu","md","undefined"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,QAAP,IAAmBC,OAAnB,QAAkC,4BAAlC;AACA,OAAO,0CAAP;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AAEAF,QAAQ,CAACG,KAAT,CAAeF,OAAO,CAACG,aAAvB;AAEA,MAAMC,MAAM,GAAG,IAAIN,UAAJ,EAAf;;AACA,MAAMO,aAAa,GACjBD,MAAM,CAACE,QAAP,CAAgBC,KAAhB,CAAsBC,SAAtB,IACA,UAAUC,MAAV,EAAuBC,GAAvB,EAAiCC,OAAjC,EAA+CC,GAA/C,EAAyDC,IAAzD,EAAoE;AAClE,SAAOA,IAAI,CAACC,WAAL,CAAiBL,MAAjB,EAAyBC,GAAzB,EAA8BC,OAA9B,CAAP;AACD,CAJH;;AAMAP,MAAM,CAACE,QAAP,CAAgBC,KAAhB,CAAsBC,SAAtB,GAAkC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AAC3E,MAAIE,MAAM,GAAGN,MAAM,CAACC,GAAD,CAAN,CAAYM,SAAZ,CAAsB,QAAtB,CAAb;;AACA,MAAID,MAAM,GAAG,CAAb,EAAgB;AACdN,IAAAA,MAAM,CAACC,GAAD,CAAN,CAAYO,QAAZ,CAAqB,CAAC,QAAD,EAAW,QAAX,CAArB;AACD,GAFD,MAEO;AACL;AACAR,IAAAA,MAAM,CAACC,GAAD,CAAN,CAAYQ,KAAZ,CAAkBH,MAAlB,EAA0B,CAA1B,IAA+B,QAA/B;AACD;;AACD,SAAOV,aAAa,CAACI,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,IAA5B,CAApB;AACD,CATD;;AAiBA,eAAe,SAASM,cAAT,CAAwBC,KAAxB,EAAoD;AACjE,iBAAeC,iBAAf,CAAiCC,IAAjC,EAA6C;AAC3C,WAAOrB,WAAW,CAACsB,MAAZ,CAAmBD,IAAnB,CAAP;AACD;;AACD,sBACE,QAAC,QAAD;AACE,IAAA,QAAQ,EAAEF,KAAK,CAACI,QADlB;AAEE,IAAA,aAAa,EAAEH,iBAFjB;AAGE,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAEL,KAAK,CAACI,QAAN,GAAiB,MAAjB,GAA0B;AAApC,KAHT;AAIE,IAAA,KAAK,EAAEJ,KAAK,CAACM,KAJf;AAKE,IAAA,UAAU,EAAGC,IAAD,IAAUvB,MAAM,CAACwB,MAAP,CAAcD,IAAd,CALxB;AAME,IAAA,MAAM,EAAE;AACNE,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAE;AADF;AADA,KANV;AAWE,IAAA,QAAQ,EAAE,CAAC;AAAEH,MAAAA;AAAF,KAAD,KAAcP,KAAK,CAACW,QAAN,IAAkBX,KAAK,CAACW,QAAN,CAAeJ,IAAf,CAX5C;AAYE,IAAA,IAAI,EACFP,KAAK,CAACI,QAAN,GACI;AACEQ,MAAAA,IAAI,EAAE,KADR;AAEEC,MAAAA,EAAE,EAAE,KAFN;AAGEH,MAAAA,IAAI,EAAE;AAHR,KADJ,GAMII;AAnBR;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;KA5BuBf,c","sourcesContent":["import MarkdownIt from \"markdown-it\";\r\nimport MdEditor, { Plugins } from \"react-markdown-editor-lite\";\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\nimport { FileService } from \"danielbonifacio-sdk\";\r\n\r\nMdEditor.unuse(Plugins.FontUnderline);\r\n\r\nconst parser = new MarkdownIt();\r\nconst defaultRender =\r\n  parser.renderer.rules.link_open ||\r\n  function (tokens: any, idx: any, options: any, env: any, self: any) {\r\n    return self.renderToken(tokens, idx, options);\r\n  };\r\n\r\nparser.renderer.rules.link_open = function (tokens, idx, options, env, self) {\r\n  var aIndex = tokens[idx].attrIndex(\"target\");\r\n  if (aIndex < 0) {\r\n    tokens[idx].attrPush([\"target\", \"_blank\"]);\r\n  } else {\r\n    //@ts-ignore\r\n    tokens[idx].attrs[aIndex][1] = \"_blank\";\r\n  }\r\n  return defaultRender(tokens, idx, options, env, self);\r\n};\r\n\r\nexport interface MarkdownEditorProps {\r\n  onChange?: (text: string) => any;\r\n  value?: string;\r\n  readOnly?: boolean;\r\n}\r\n\r\nexport default function MarkdownEditor(props: MarkdownEditorProps) {\r\n  async function handleImageUpload(file: File) {\r\n    return FileService.upload(file);\r\n  }\r\n  return (\r\n    <MdEditor\r\n      readOnly={props.readOnly}\r\n      onImageUpload={handleImageUpload}\r\n      style={{ height: props.readOnly ? \"auto\" : 300 }}\r\n      value={props.value}\r\n      renderHTML={(text) => parser.render(text)}\r\n      config={{\r\n        view: {\r\n          html: false,\r\n        },\r\n      }}\r\n      onChange={({ text }) => props.onChange && props.onChange(text)}\r\n      view={\r\n        props.readOnly\r\n          ? {\r\n              menu: false,\r\n              md: false,\r\n              html: true,\r\n            }\r\n          : undefined\r\n      }\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}