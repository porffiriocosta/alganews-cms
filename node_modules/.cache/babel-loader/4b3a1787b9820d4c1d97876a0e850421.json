{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-cms\\\\src\\\\app\\\\features\\\\PostForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { PostService } from \"danielbonifacio-sdk\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport countWordsInMarkdown from \"../../core/utils/countWordsInMarkdown\";\nimport info from \"../../core/utils/info\";\nimport Button from \"../components/Button/Button\";\nimport ImageUpload from \"../components/ImageUpload\";\nimport Input from \"../components/Input/Input\";\nimport Loading from \"../components/Loading\";\nimport MarkdownEditor from \"../components/MarkdownEditor\";\nimport TagInput from \"../components/TagInput\";\nimport WordPriceCounter from \"../components/WordPriceCounter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostForm(props) {\n  _s();\n\n  const history = useHistory();\n  const [tags, setTags] = useState([]);\n  const [body, setBody] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [publishing, setPublishing] = useState(false);\n\n  async function insertNewPost() {\n    const newPost = {\n      body,\n      title,\n      imageUrl,\n      tags: tags.map(tag => tag.text)\n    };\n    await PostService.insertNewPost(newPost);\n    info({\n      title: \"Post salvo com sucesso\",\n      description: \"Você acabou de criar o post\"\n    });\n  }\n\n  async function updateExistingPost(postId) {\n    const newPost = {\n      body,\n      title,\n      imageUrl,\n      tags: tags.map(tag => tag.text)\n    };\n    await PostService.updateExistingPost(postId, newPost);\n    info({\n      title: \"Post atualizado\",\n      description: \"Você atualizou o post com sucesso\"\n    });\n  }\n\n  async function handleFormSubmit(e) {\n    try {\n      e.preventDefault();\n      setPublishing(true);\n      props.postId ? await updateExistingPost(props.postId) : await insertNewPost();\n      history.push(\"/\");\n    } finally {\n      setPublishing(false);\n    }\n  }\n\n  function fetchPost(postId) {\n    PostService.getExistingPost(postId).then(post => {\n      setTitle(post.title);\n      setImageUrl(post.imageUrls.default);\n      setBody(post.body);\n      setTags(post.tags.map(tag => ({\n        id: tag,\n        text: tag\n      })));\n    });\n  }\n\n  useEffect(() => {\n    if (props.postId) {\n      fetchPost(props.postId);\n    }\n  }, [props.postId]);\n  return /*#__PURE__*/_jsxDEV(PostFormWrapper, {\n    onSubmit: handleFormSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Loading, {\n      show: publishing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      label: \"t\\xEDtulo\",\n      value: title,\n      onChange: e => setTitle(e.currentTarget.value),\n      placeholder: \"e.g.: Como fiquei rico aprendendo React\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageUpload, {\n      onImageUpload: setImageUrl,\n      label: \"Thumbnail do post\",\n      preview: imageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MarkdownEditor, {\n      onChange: setBody,\n      value: body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagInput, {\n      tags: tags,\n      onAdd: tag => setTags([...tags, tag]),\n      onDelete: index => setTags(tags.filter((_, i) => i !== index)),\n      placeholder: \"Insira as tags deste post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostFormSubmitWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(WordPriceCounter, {\n        pricePerWord: 0.1,\n        wordsCount: countWordsInMarkdown(body)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        label: \"Salvar post\",\n        type: \"submit\",\n        disabled: !title || !imageUrl || !body || !tags.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostForm, \"g6+yIuWtUMwH+A9Ey+8OzMST08I=\", false, function () {\n  return [useHistory];\n});\n\n_c = PostForm;\nconst PostFormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n_c2 = PostFormWrapper;\nconst PostFormSubmitWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n_c3 = PostFormSubmitWrapper;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PostForm\");\n$RefreshReg$(_c2, \"PostFormWrapper\");\n$RefreshReg$(_c3, \"PostFormSubmitWrapper\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-cms/src/app/features/PostForm.tsx"],"names":["PostService","useEffect","useState","useHistory","styled","countWordsInMarkdown","info","Button","ImageUpload","Input","Loading","MarkdownEditor","TagInput","WordPriceCounter","PostForm","props","history","tags","setTags","body","setBody","title","setTitle","imageUrl","setImageUrl","publishing","setPublishing","insertNewPost","newPost","map","tag","text","description","updateExistingPost","postId","handleFormSubmit","e","preventDefault","push","fetchPost","getExistingPost","then","post","imageUrls","default","id","currentTarget","value","index","filter","_","i","length","PostFormWrapper","form","PostFormSubmitWrapper","div"],"mappings":"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","sourcesContent":["import { PostService } from \"danielbonifacio-sdk\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Tag } from \"react-tag-input\";\r\nimport styled from \"styled-components\";\r\nimport countWordsInMarkdown from \"../../core/utils/countWordsInMarkdown\";\r\nimport info from \"../../core/utils/info\";\r\nimport Button from \"../components/Button/Button\";\r\nimport ImageUpload from \"../components/ImageUpload\";\r\nimport Input from \"../components/Input/Input\";\r\nimport Loading from \"../components/Loading\";\r\nimport MarkdownEditor from \"../components/MarkdownEditor\";\r\nimport TagInput from \"../components/TagInput\";\r\nimport WordPriceCounter from \"../components/WordPriceCounter\";\r\n\r\ninterface PostFormProps {\r\n  postId?: number;\r\n}\r\n\r\nexport default function PostForm(props: PostFormProps) {\r\n  const history = useHistory();\r\n\r\n  const [tags, setTags] = useState<Tag[]>([]);\r\n  const [body, setBody] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n\r\n  const [publishing, setPublishing] = useState(false);\r\n\r\n  async function insertNewPost() {\r\n    const newPost = {\r\n      body,\r\n      title,\r\n      imageUrl,\r\n      tags: tags.map((tag) => tag.text),\r\n    };\r\n\r\n    await PostService.insertNewPost(newPost);\r\n\r\n    info({\r\n      title: \"Post salvo com sucesso\",\r\n      description: \"Você acabou de criar o post\",\r\n    });\r\n  }\r\n\r\n  async function updateExistingPost(postId: number) {\r\n    const newPost = {\r\n      body,\r\n      title,\r\n      imageUrl,\r\n      tags: tags.map((tag) => tag.text),\r\n    };\r\n\r\n    await PostService.updateExistingPost(postId, newPost);\r\n\r\n    info({\r\n      title: \"Post atualizado\",\r\n      description: \"Você atualizou o post com sucesso\",\r\n    });\r\n  }\r\n\r\n  async function handleFormSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    try {\r\n      e.preventDefault();\r\n      setPublishing(true);\r\n\r\n      props.postId\r\n        ? await updateExistingPost(props.postId)\r\n        : await insertNewPost();\r\n\r\n      history.push(\"/\");\r\n    } finally {\r\n      setPublishing(false);\r\n    }\r\n  }\r\n\r\n  function fetchPost(postId: number) {\r\n    PostService.getExistingPost(postId).then((post) => {\r\n      setTitle(post.title);\r\n      setImageUrl(post.imageUrls.default);\r\n      setBody(post.body);\r\n      setTags(post.tags.map((tag) => ({ id: tag, text: tag })));\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.postId) {\r\n      fetchPost(props.postId);\r\n    }\r\n  }, [props.postId]);\r\n\r\n  return (\r\n    <PostFormWrapper onSubmit={handleFormSubmit}>\r\n      <Loading show={publishing} />\r\n      <Input\r\n        label=\"título\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.currentTarget.value)}\r\n        placeholder=\"e.g.: Como fiquei rico aprendendo React\"\r\n      />\r\n      <ImageUpload\r\n        onImageUpload={setImageUrl}\r\n        label=\"Thumbnail do post\"\r\n        preview={imageUrl}\r\n      />\r\n      <MarkdownEditor onChange={setBody} value={body} />\r\n      <TagInput\r\n        tags={tags}\r\n        onAdd={(tag) => setTags([...tags, tag])}\r\n        onDelete={(index) => setTags(tags.filter((_, i) => i !== index))}\r\n        placeholder=\"Insira as tags deste post\"\r\n      />\r\n      <PostFormSubmitWrapper>\r\n        <WordPriceCounter\r\n          pricePerWord={0.1}\r\n          wordsCount={countWordsInMarkdown(body)}\r\n        />\r\n        <Button\r\n          variant=\"primary\"\r\n          label=\"Salvar post\"\r\n          type=\"submit\"\r\n          disabled={!title || !imageUrl || !body || !tags.length}\r\n        />\r\n      </PostFormSubmitWrapper>\r\n    </PostFormWrapper>\r\n  );\r\n}\r\n\r\nconst PostFormWrapper = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n`;\r\n\r\nconst PostFormSubmitWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}