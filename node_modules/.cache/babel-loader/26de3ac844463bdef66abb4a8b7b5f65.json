{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-cms\\\\src\\\\app\\\\components\\\\CircleChart\\\\CircleChart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport * as CC from \"./CircleChart.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CircleChart(props) {\n  _s();\n\n  if (props.progress > 100) throw new Error(\"Progresso só pode ser menor igual a 100\"); // função que recupera a cor do chart com base no tema\n\n  const getThemeColor = () => props.theme === \"primary\" ? \"#09f\" : \"#274060\"; // setup (configurações de cor, borda, etc.)\n\n\n  const THEME = getThemeColor();\n  const STROKE_WIDTH = props.strokeWidth || 8;\n  const STROKE_COLOR = THEME; // matemática da coisa\n\n  const CENTER = props.size / 2;\n  const RADIUS = props.size / 2 - STROKE_WIDTH / 2;\n  const CIRCUMFERENCE = 2 * Math.PI * RADIUS; // estado de offset\n\n  const [offset, setOffset] = useState(CIRCUMFERENCE); // oberservador para animar o ofsset\n\n  useEffect(() => {\n    const progressOffset = (100 - props.progress) / 100 * CIRCUMFERENCE;\n    setOffset(progressOffset);\n  }, [setOffset, CIRCUMFERENCE, props.progress, offset]);\n  return /*#__PURE__*/_jsxDEV(CC.Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(CC.SvgWrapper, {\n      \"data-testid\": \"svg-wrapper\",\n      style: {\n        width: props.size,\n        height: props.size\n      },\n      children: [/*#__PURE__*/_jsxDEV(CC.Svg, {\n        width: props.size,\n        height: props.size,\n        children: [/*#__PURE__*/_jsxDEV(CC.CircleBG, {\n          cy: CENTER,\n          cx: CENTER,\n          r: RADIUS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CC.Circle, {\n          fill: \"none\",\n          cy: CENTER,\n          cx: CENTER,\n          r: RADIUS,\n          stroke: STROKE_COLOR,\n          strokeWidth: STROKE_WIDTH,\n          strokeDasharray: CIRCUMFERENCE,\n          strokeDashoffset: offset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CC.Percentage, {\n        style: {\n          color: THEME\n        },\n        children: [Math.ceil(props.progress), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), props.caption && /*#__PURE__*/_jsxDEV(CC.Caption, {\n      children: props.caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CircleChart, \"4fw6tbw9u0lwQ8I7zAghx22f0XM=\");\n\n_c = CircleChart;\nexport default CircleChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"CircleChart\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-cms/src/app/components/CircleChart/CircleChart.tsx"],"names":["useEffect","useState","CC","CircleChart","props","progress","Error","getThemeColor","theme","THEME","STROKE_WIDTH","strokeWidth","STROKE_COLOR","CENTER","size","RADIUS","CIRCUMFERENCE","Math","PI","offset","setOffset","progressOffset","width","height","color","ceil","caption"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport * as CC from \"./CircleChart.styles\";\r\n\r\nexport interface CircleChartProps {\r\n  size: number;\r\n  progress: number;\r\n  caption?: string;\r\n  theme?: \"default\" | \"primary\";\r\n  strokeWidth?: number;\r\n}\r\n\r\nfunction CircleChart(props: CircleChartProps) {\r\n  if (props.progress > 100)\r\n    throw new Error(\"Progresso só pode ser menor igual a 100\");\r\n\r\n  // função que recupera a cor do chart com base no tema\r\n  const getThemeColor = () => (props.theme === \"primary\" ? \"#09f\" : \"#274060\");\r\n\r\n  // setup (configurações de cor, borda, etc.)\r\n  const THEME = getThemeColor();\r\n  const STROKE_WIDTH = props.strokeWidth || 8;\r\n  const STROKE_COLOR = THEME;\r\n\r\n  // matemática da coisa\r\n  const CENTER = props.size / 2;\r\n  const RADIUS = props.size / 2 - STROKE_WIDTH / 2;\r\n  const CIRCUMFERENCE = 2 * Math.PI * RADIUS;\r\n\r\n  // estado de offset\r\n  const [offset, setOffset] = useState(CIRCUMFERENCE);\r\n\r\n  // oberservador para animar o ofsset\r\n  useEffect(() => {\r\n    const progressOffset = ((100 - props.progress) / 100) * CIRCUMFERENCE;\r\n    setOffset(progressOffset);\r\n  }, [setOffset, CIRCUMFERENCE, props.progress, offset]);\r\n\r\n  return (\r\n    <CC.Wrapper>\r\n      <CC.SvgWrapper\r\n        data-testid={\"svg-wrapper\"}\r\n        style={{ width: props.size, height: props.size }}\r\n      >\r\n        <CC.Svg width={props.size} height={props.size}>\r\n          <CC.CircleBG cy={CENTER} cx={CENTER} r={RADIUS} />\r\n          <CC.Circle\r\n            fill=\"none\"\r\n            cy={CENTER}\r\n            cx={CENTER}\r\n            r={RADIUS}\r\n            stroke={STROKE_COLOR}\r\n            strokeWidth={STROKE_WIDTH}\r\n            strokeDasharray={CIRCUMFERENCE}\r\n            strokeDashoffset={offset}\r\n          />\r\n        </CC.Svg>\r\n        <CC.Percentage style={{ color: THEME }}>\r\n          {Math.ceil(props.progress)}%\r\n        </CC.Percentage>\r\n      </CC.SvgWrapper>\r\n      {props.caption && <CC.Caption>{props.caption}</CC.Caption>}\r\n    </CC.Wrapper>\r\n  );\r\n}\r\n\r\nexport default CircleChart;\r\n"]},"metadata":{},"sourceType":"module"}