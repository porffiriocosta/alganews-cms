// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react

declare module 'react-markdown-editor-lite' {
  import Editor from 'react-markdown-editor-lite/editor';
  import AutoResize from 'react-markdown-editor-lite/plugins/autoResize';
  import BlockCodeBlock from 'react-markdown-editor-lite/plugins/block/code-block';
  import BlockCodeInline from 'react-markdown-editor-lite/plugins/block/code-inline';
  import BlockQuote from 'react-markdown-editor-lite/plugins/block/quote';
  import BlockWrap from 'react-markdown-editor-lite/plugins/block/wrap';
  import Clear from 'react-markdown-editor-lite/plugins/clear';
  import FontBold from 'react-markdown-editor-lite/plugins/font/bold';
  import FontItalic from 'react-markdown-editor-lite/plugins/font/italic';
  import FontStrikethrough from 'react-markdown-editor-lite/plugins/font/strikethrough';
  import FontUnderline from 'react-markdown-editor-lite/plugins/font/underline';
  import FullScreen from 'react-markdown-editor-lite/plugins/fullScreen';
  import Header from 'react-markdown-editor-lite/plugins/header';
  import Image from 'react-markdown-editor-lite/plugins/Image';
  import Link from 'react-markdown-editor-lite/plugins/link';
  import ListOrdered from 'react-markdown-editor-lite/plugins/list/ordered';
  import ListUnordered from 'react-markdown-editor-lite/plugins/list/unordered';
  import Logger from 'react-markdown-editor-lite/plugins/logger';
  import ModeToggle from 'react-markdown-editor-lite/plugins/modeToggle';
  import Table from 'react-markdown-editor-lite/plugins/table';
  import TabInsert from 'react-markdown-editor-lite/plugins/tabInsert';
  export { default as DropList } from 'react-markdown-editor-lite/components/DropList/index';
  export { PluginComponent, PluginProps } from 'react-markdown-editor-lite/plugins/Plugin';
  export { default as getDecorated } from 'react-markdown-editor-lite/utils/decorate';
  export const Plugins: {
    Header: typeof Header;
    FontBold: typeof FontBold;
    FontItalic: typeof FontItalic;
    FontUnderline: typeof FontUnderline;
    FontStrikethrough: typeof FontStrikethrough;
    ListUnordered: typeof ListUnordered;
    ListOrdered: typeof ListOrdered;
    BlockQuote: typeof BlockQuote;
    BlockWrap: typeof BlockWrap;
    BlockCodeInline: typeof BlockCodeInline;
    BlockCodeBlock: typeof BlockCodeBlock;
    Table: typeof Table;
    Image: typeof Image;
    Link: typeof Link;
    Clear: typeof Clear;
    Logger: typeof Logger;
    ModeToggle: typeof ModeToggle;
    FullScreen: typeof FullScreen;
    AutoResize: typeof AutoResize;
    TabInsert: typeof TabInsert;
  };
  export default Editor;
}

declare module 'react-markdown-editor-lite/editor' {
  import * as React from 'react';
  import { EditorConfig, EditorEvent, KeyboardEventListener, Selection } from 'react-markdown-editor-lite/share/var';
  import { HtmlType } from 'react-markdown-editor-lite/editor/preview';
  interface EditorProps extends EditorConfig {
      id?: string;
      defaultValue?: string;
      value?: string;
      renderHTML: (text: string) => HtmlType | Promise<HtmlType> | (() => HtmlType);
      style?: React.CSSProperties;
      placeholder?: string;
      readOnly?: boolean;
      config?: any;
      plugins?: string[];
      onChange?: (data: {
          text: string;
          html: string;
      }, event?: React.ChangeEvent<HTMLTextAreaElement>) => void;
      onFocus?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;
      onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;
      onScroll?: (e: React.UIEvent<HTMLTextAreaElement | HTMLDivElement>, type: 'md' | 'html') => void;
  }
  interface EditorState {
      text: string;
      html: HtmlType;
      fullScreen: boolean;
      plugins: {
          [x: string]: React.ReactElement[];
      };
      view: {
          menu: boolean;
          md: boolean;
          html: boolean;
      };
      table: {
          maxRow: number;
          maxCol: number;
      };
  }
  class Editor extends React.Component<EditorProps, EditorState> {
      /**
        * Register plugin
        * @param {any} comp Plugin component
        * @param {any} config Other configs
        */
      static use(comp: any, config?: any): void;
      /**
        * Unregister plugin
        * @param {any} comp Plugin component
        */
      static unuse(comp: any): void;
      /**
        * Unregister all plugins
        * @param {any} comp Plugin component
        */
      static unuseAll(): void;
      /**
        * Locales
        */
      static addLocale: (langName: string, lang: {
          [x: string]: string;
      }) => void;
      static useLocale: (langName: string) => void;
      static getLocale: () => string;
      constructor(props: any);
      componentDidMount(): void;
      componentWillUnmount(): void;
      componentDidUpdate(prevProps: EditorProps): void;
      /**
        * Get elements
        */
      getMdElement(): HTMLTextAreaElement | null;
      getHtmlElement(): HTMLDivElement | null;
      /**
        * Clear selected
        */
      clearSelection(): void;
      /**
        * Get selected
        * @return {Selection}
        */
      getSelection(): Selection;
      /**
        * Set selected
        * @param {Selection} to
        */
      setSelection(to: {
          start: number;
          end: number;
      }): void;
      /**
        * Insert markdown text
        * @param type
        * @param option
        */
      insertMarkdown(type: string, option?: any): void;
      /**
        * Insert a placeholder, and replace it when the Promise resolved
        * @param placeholder
        * @param wait
        */
      insertPlaceholder(placeholder: string, wait: Promise<string>): void;
      /**
        * Insert text
        * @param {string} value The text will be insert
        * @param {boolean} replaceSelected Replace selected text
        * @param {Selection} newSelection New selection
        */
      insertText(value?: string, replaceSelected?: boolean, newSelection?: {
          start: number;
          end: number;
      }): void;
      /**
        * Set text, and trigger onChange event
        * @param {string} value
        * @param {any} event
        */
      setText(value?: string, event?: React.ChangeEvent<HTMLTextAreaElement>, newSelection?: {
          start: number;
          end: number;
      }): void;
      /**
        * Get text value
        * @return {string}
        */
      getMdValue(): string;
      /**
        * Get rendered html
        * @returns {string}
        */
      getHtmlValue(): string;
      /**
        * Listen keyboard events
        * @param {KeyboardEventListener} data
        */
      onKeyboard(data: KeyboardEventListener | KeyboardEventListener[]): void;
      /**
        * Unlisten keyboard events
        * @param {KeyboardEventListener} data
        */
      offKeyboard(data: KeyboardEventListener | KeyboardEventListener[]): void;
      /**
        * Listen events
        * @param {EditorEvent} event Event type
        * @param {any} cb Callback
        */
      on(event: EditorEvent, cb: any): void;
      /**
        * Unlisten events
        * @param {EditorEvent} event Event type
        * @param {any} cb Callback
        */
      off(event: EditorEvent, cb: any): void;
      /**
        * Set view property
        * Can show or hide: editor, preview, menu
        * @param {object} to
        */
      setView(to: {
          md?: boolean;
          menu?: boolean;
          html?: boolean;
      }): void;
      /**
        * Get view property
        * @return {object}
        */
      getView(): {
          menu: boolean;
          md: boolean;
          html: boolean;
      };
      /**
        * Enter or exit full screen
        * @param {boolean} enable
        */
      fullScreen(enable: boolean): void;
      /**
        * Is full screen
        * @return {boolean}
        */
      isFullScreen(): boolean;
      render(): JSX.Element;
  }
  export default Editor;
}

declare module 'react-markdown-editor-lite/plugins/autoResize' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class AutoResize extends PluginComponent {
    static pluginName: string;
    static align: string;
    static defaultConfig: {
      min: number;
      max: number;
      useTimer: boolean;
    };
    constructor(props: any);
    doResize(): void;
    handleChange(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/block/code-block' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class BlockCodeBlock extends PluginComponent {
    static pluginName: string;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/block/code-inline' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class BlockCodeInline extends PluginComponent {
    static pluginName: string;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/block/quote' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class BlockQuote extends PluginComponent {
    static pluginName: string;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/block/wrap' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class BlockWrap extends PluginComponent {
    static pluginName: string;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/clear' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class Clear extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    handleClick(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/font/bold' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class FontBold extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/font/italic' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class FontItalic extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/font/strikethrough' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class FontStrikethrough extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/font/underline' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class FontUnderline extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/fullScreen' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  interface FullScreenState {
    enable: boolean;
  }
  export default class FullScreen extends PluginComponent<FullScreenState> {
    static pluginName: string;
    static align: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element | null;
  }
  export {};
}

declare module 'react-markdown-editor-lite/plugins/header' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  interface State {
    show: boolean;
  }
  export default class Header extends PluginComponent<State> {
    static pluginName: string;
    constructor(props: any);
    render(): JSX.Element;
  }
  export {};
}

declare module 'react-markdown-editor-lite/plugins/Image' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  interface State {
    show: boolean;
  }
  export default class Image extends PluginComponent<State> {
    static pluginName: string;
    constructor(props: any);
    render(): JSX.Element;
  }
  export {};
}

declare module 'react-markdown-editor-lite/plugins/link' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class Link extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/list/ordered' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class ListOrdered extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/list/unordered' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class ListUnordered extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/logger' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  export default class Logger extends PluginComponent {
    static pluginName: string;
    constructor(props: any);
    handleChange(value: string, e: any, isChange: boolean): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    pause(): void;
    render(): JSX.Element;
  }
}

declare module 'react-markdown-editor-lite/plugins/modeToggle' {
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  interface ModeToggleState {
    view: {
      html: boolean;
      md: boolean;
    };
  }
  export default class ModeToggle extends PluginComponent<ModeToggleState> {
    static pluginName: string;
    static align: string;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    getDisplayInfo(): {
      icon: string;
      title: string;
    };
    render(): JSX.Element | null;
  }
  export {};
}

declare module 'react-markdown-editor-lite/plugins/table' {
  import { PluginComponent, PluginProps } from 'react-markdown-editor-lite/plugins/Plugin';
  interface State {
    show: boolean;
  }
  interface Props extends PluginProps {
    config: {
      maxRow?: number;
      maxCol?: number;
    };
  }
  export default class Table extends PluginComponent<State, Props> {
    static pluginName: string;
    static defaultConfig: {
      maxRow: number;
      maxCol: number;
    };
    constructor(props: any);
    render(): JSX.Element;
  }
  export {};
}

declare module 'react-markdown-editor-lite/plugins/tabInsert' {
  /**
    * Since the Markdown Editor will lose input focus when user tpye a Tab key,
    * this is a built-in plugin to enable user to input Tab character.
    * see src/demo/index.tsx.
    */
  import { PluginComponent } from 'react-markdown-editor-lite/plugins/Plugin';
  /**
    * @field tabMapValue:  Number of spaces will be inputted. Especially, note that 1 means a '\t' instead of ' '.
    * @field show:         Whether to show TabMapList.
    */
  interface TabInsertState {
      tabMapValue: number;
      show: boolean;
  }
  export default class TabInsert extends PluginComponent<TabInsertState> {
      static pluginName: string;
      static defaultConfig: {
          tabMapValue: number;
      };
      constructor(props: any);
      componentDidMount(): void;
      componentWillUnmount(): void;
      render(): JSX.Element;
  }
  export {};
}

declare module 'react-markdown-editor-lite/components/DropList/index' {
  import * as React from 'react';
  interface DropListProps {
    show: boolean;
    onClose?: () => void;
  }
  class DropList extends React.Component<DropListProps, any> {
    constructor(props: any);
    handleClose(e: React.MouseEvent<HTMLDivElement, MouseEvent>): void;
    render(): JSX.Element;
  }
  export default DropList;
}

declare module 'react-markdown-editor-lite/plugins/Plugin' {
  import * as React from 'react';
  import Editor from 'react-markdown-editor-lite/editor';
  import { EditorConfig } from 'react-markdown-editor-lite/share/var';
  export interface PluginProps {
    editor: Editor;
    editorConfig: EditorConfig;
    config: any;
  }
  export abstract class PluginComponent<S = {}, P extends PluginProps = PluginProps> extends React.Component<P, S> {
    static pluginName: string;
    static align: string;
    static defaultConfig: {};
    protected get editor(): Editor;
    protected get editorConfig(): EditorConfig;
    constructor(props: P);
    protected getConfig(key: string, defaultValue?: any): any;
  }
}

declare module 'react-markdown-editor-lite/utils/decorate' {
  interface Decorated {
    text: string;
    selection?: {
      start: number;
      end: number;
    };
  }
  /**
    * 获取装饰后的Markdown文本
    * @param target 原文字
    * @param type 装饰类型
    * @param option 附加参数
    * @returns {Decorated}
    */
  function getDecorated(target: string, type: string, option?: any): Decorated;
  export default getDecorated;
}

declare module 'react-markdown-editor-lite/share/var' {
  import * as React from 'react';
  export type UploadFunc = ((file: File) => Promise<string>) | ((file: File, callback: (url: string) => void) => void);
  export type EditorEvent = 'change' | 'fullscreen' | 'viewchange' | 'keydown' | 'focus' | 'blur' | 'scroll';
  export interface EditorConfig {
    theme?: string;
    name?: string;
    view?: {
      menu: boolean;
      md: boolean;
      html: boolean;
    };
    canView?: {
      menu: boolean;
      md: boolean;
      html: boolean;
      both: boolean;
      fullScreen: boolean;
      hideMenu: boolean;
    };
    htmlClass?: string;
    markdownClass?: string;
    imageUrl?: string;
    imageAccept?: string;
    linkUrl?: string;
    table?: {
      maxRow: number;
      maxCol: number;
    };
    syncScrollMode?: string[];
    allowPasteImage?: boolean;
    onImageUpload?: UploadFunc;
    onCustomImageUpload?: (event: any) => Promise<{
      url: string;
      text?: string;
    }>;
    shortcuts?: boolean;
  }
  export interface Selection {
    start: number;
    end: number;
    text: string;
  }
  export const initialSelection: Selection;
  export type KeyboardEventCallback = (e: React.KeyboardEvent<HTMLDivElement>) => void;
  export interface KeyboardEventCondition {
    key?: string;
    keyCode: number;
    aliasCommand?: boolean;
    withKey?: ('ctrlKey' | 'shiftKey' | 'altKey' | 'metaKey')[];
  }
  export interface KeyboardEventListener extends KeyboardEventCondition {
    callback: KeyboardEventCallback;
  }
}

declare module 'react-markdown-editor-lite/editor/preview' {
  import * as React from 'react';
  export type HtmlType = string | React.ReactElement;
  export interface PreviewProps {
    html: HtmlType;
    className?: string;
  }
  export abstract class Preview<T extends HTMLElement> extends React.Component<PreviewProps, any> {
    protected el: React.RefObject<T>;
    constructor(props: any);
    abstract getHtml(): string;
    getElement(): T | null;
    getHeight(): number;
  }
  export class HtmlRender extends Preview<HTMLDivElement> {
    getHtml(): string;
    render(): React.DetailedReactHTMLElement<{
      ref: React.RefObject<HTMLDivElement>;
      className: string;
    }, HTMLDivElement>;
  }
  export default HtmlRender;
}

